{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/typography.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_exports__","_ref3","data","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","allMarkdownRemark","edges","map","_ref4","node","key","id","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","fields","slug","css","_ref","rhythm","frontmatter","title","_ref2","date","excerpt","query","m","module","exports","require","default","loader","enqueue","React","createContext","__webpack_require__","d","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_fairy_gates__WEBPACK_IMPORTED_MODULE_1__","typography_theme_fairy_gates__WEBPACK_IMPORTED_MODULE_1___default","typography_plugin_code__WEBPACK_IMPORTED_MODULE_2__","typography_plugin_code__WEBPACK_IMPORTED_MODULE_2___default","theme","baseFontSize","baseLineHeight","scaleRatio","googleFonts","name","styles","headerFontFamily","bodyFontFamily","headerWeight","headerColor","plugins","CodePlugin","typography","Typography","children","_public_static_d_3892401927_json__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_3__","site","siteMetadata","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json"],"mappings":"wRAMeA,EAAA,iBAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAChB,OACEC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACIF,OAAAC,EAAA,EAAAD,CAAA,mBACCD,EAAKI,kBAAkBC,MAAMC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAChCP,OAAAC,EAAA,EAAAD,CAAA,OAAKQ,IAAKD,EAAKE,IACbT,OAAAC,EAAA,EAAAD,CAACU,EAAA,EAAD,CACEC,GAAIJ,EAAKK,OAAOC,KAChBC,IAAGC,GAKHf,OAAAC,EAAA,EAAAD,CAAA,MACEc,IAAKA,YAAF,iBACgBE,YAAO,IADvB,MAIFT,EAAKU,YAAYC,MAAO,IACzBlB,OAAAC,EAAA,EAAAD,CAAA,QACEc,IAAGK,GADL,KAKKZ,EAAKU,YAAYG,OAGxBpB,OAAAC,EAAA,EAAAD,CAAA,SAAIO,EAAKc,eAQhB,IAAMC,EAAK,kCCzClB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,6HCctBK,QAAOC,QAELC,IAAMC,cAAc,sCChB/CC,EAAAC,EAAApC,EAAA,sBAAAmB,IAAA,IAAAkB,EAAAF,EAAA,KAAAG,EAAAH,EAAAI,EAAAF,GAAAG,EAAAL,EAAA,KAAAM,EAAAN,EAAAI,EAAAC,GAAAE,EAAAP,EAAA,KAAAQ,EAAAR,EAAAI,EAAAG,GAIAE,IAAMC,aAAe,OACrBD,IAAME,eAAiB,IACvBF,IAAMG,WAAa,IACnBH,IAAMI,YAAc,CAChB,CACIC,KAAM,OACNC,OAAQ,CAAC,QAEb,CACED,KAAM,OACNC,OAAQ,CAAC,MAAO,OAAQ,MAAO,UAGrCN,IAAMO,iBAAmB,CAAC,OAAQ,cAClCP,IAAMQ,eAAiB,CAAC,OAAQ,SAChCR,IAAMS,aAAe,MACrBT,IAAMU,YAAc,QACpBV,IAAMW,QAAU,CAAC,IAAIC,KAErB,IAAMC,EAAa,IAAIC,IAAWd,KAGrBzB,EAASsC,EAAWtC,+HCrBlBnB,EAAA,WAAAsB,GAAkB,IAAfqC,EAAerC,EAAfqC,SACVzD,EAAI0D,EAAA1D,KAWV,OACEC,OAAAC,EAAA,EAAAD,CAAA,OACEc,IAAKA,YAAF,yCAGUE,YAAO,GAHjB,gBAIcA,YAAO,KAJrB,MAOHhB,OAAAC,EAAA,EAAAD,CAAC0D,EAAA,EAAD,CAAM/C,GAAE,KACNX,OAAAC,EAAA,EAAAD,CAAA,MACEc,IAAKA,YAAF,iBACgBE,YAAO,GADvB,6CAMFjB,EAAK4D,KAAKC,aAAa1C,QAG5BlB,OAAAC,EAAA,EAAAD,CAAC0D,EAAA,EAAD,CACE/C,GAAE,UACFG,IAAGC,GAFL,SAQCyC,0KCvBQK,UAjBU,SAAA9C,GAAiC,IAA9B+C,EAA8B/C,EAA9B+C,SAAUC,EAAoBhD,EAApBgD,cACpC,OAAKA,EAGEjC,IAAMkC,cAAcC,IAApBjE,OAAAkE,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV","file":"component---src-pages-index-js-7114821a35ec1574c760.js","sourcesContent":["import React from \"react\"\nimport { css } from \"@emotion/core\"\nimport { Link, graphql } from \"gatsby\"\nimport { rhythm } from \"../utils/typography\"\nimport Layout from \"../components/layout\"\n\nexport default ({ data }) => {\n  return (\n    <Layout>\n        <h1>Posts</h1>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n            <Link\n              to={node.fields.slug}\n              css={css`\n                text-decoration: none;\n                color: inherit;\n              `}\n            >\n              <h2\n                css={css`\n                  margin-bottom: ${rhythm(1 / 2)};\n                `}\n              >\n                {node.frontmatter.title}{\" \"}\n                <span\n                  css={css`\n                    color: #bbb;\n                  `}\n                >\n                  â€” {node.frontmatter.date}\n                </span>\n              </h2>\n              <p>{node.excerpt}</p>\n            </Link>\n          </div>\n        ))}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import Typography from \"typography\"\nimport theme from \"typography-theme-fairy-gates\"\nimport CodePlugin from 'typography-plugin-code'\n\ntheme.baseFontSize = '16px'\ntheme.baseLineHeight = 1.2\ntheme.scaleRatio = 1.6\ntheme.googleFonts = [\n    {\n        name: 'Lato',\n        styles: ['300']\n    },\n    {\n      name: 'Lora',\n      styles: ['400', '400i', '700', '700i'],\n    }\n]\ntheme.headerFontFamily = ['Lato', 'sans-serif']\ntheme.bodyFontFamily = ['Lora', 'serif']\ntheme.headerWeight = '300'\ntheme.headerColor = 'slate'\ntheme.plugins = [new CodePlugin()]\n\nconst typography = new Typography(theme)\n\nexport default typography\nexport const rhythm = typography.rhythm","import React from \"react\"\nimport { css } from \"@emotion/core\"\nimport { useStaticQuery, Link, graphql } from \"gatsby\"\n\nimport { rhythm } from \"../utils/typography\"\nexport default ({ children }) => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `\n  )\n  return (\n    <div\n      css={css`\n        margin: 0 auto;\n        max-width: 700px;\n        padding: ${rhythm(2)};\n        padding-top: ${rhythm(1.5)};\n      `}\n    >\n      <Link to={`/`}>\n        <h3\n          css={css`\n            margin-bottom: ${rhythm(2)};\n            display: inline-block;\n            font-style: normal;\n          `}\n        >\n          {data.site.siteMetadata.title}\n        </h3>\n      </Link>\n      <Link\n        to={`/about/`}\n        css={css`\n          float: right;\n        `}\n      >\n        About\n      </Link>\n      {children}\n    </div>\n  )\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}